# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Proposal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, proposalId=None, pi_email=None, pi_firstname=None, pi_lastname=None, email=None, firstname=None, lastname=None, title=None, abstract=None, attachments=None, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, createdAt=None, updatedAt=None, MeasurementPeriodList=None):
        """
        Proposal - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'proposalId': 'str',
            'pi_email': 'str',
            'pi_firstname': 'str',
            'pi_lastname': 'str',
            'email': 'str',
            'firstname': 'str',
            'lastname': 'str',
            'title': 'str',
            'abstract': 'str',
            'attachments': 'list[str]',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'createdAt': 'datetime',
            'updatedAt': 'datetime',
            'MeasurementPeriodList': 'list[MeasurementPeriod]'
        }

        self.attribute_map = {
            'proposalId': 'proposalId',
            'pi_email': 'pi_email',
            'pi_firstname': 'pi_firstname',
            'pi_lastname': 'pi_lastname',
            'email': 'email',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'title': 'title',
            'abstract': 'abstract',
            'attachments': 'attachments',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt',
            'MeasurementPeriodList': 'MeasurementPeriodList'
        }

        self._proposalId = proposalId
        self._pi_email = pi_email
        self._pi_firstname = pi_firstname
        self._pi_lastname = pi_lastname
        self._email = email
        self._firstname = firstname
        self._lastname = lastname
        self._title = title
        self._abstract = abstract
        self._attachments = attachments
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._createdAt = createdAt
        self._updatedAt = updatedAt
        self._MeasurementPeriodList = MeasurementPeriodList

    @property
    def proposalId(self):
        """
        Gets the proposalId of this Proposal.
        Globally unique identifier of a proposal, eg. PID-prefix/internal-proposal-number. PID prefix is auto prepended

        :return: The proposalId of this Proposal.
        :rtype: str
        """
        return self._proposalId

    @proposalId.setter
    def proposalId(self, proposalId):
        """
        Sets the proposalId of this Proposal.
        Globally unique identifier of a proposal, eg. PID-prefix/internal-proposal-number. PID prefix is auto prepended

        :param proposalId: The proposalId of this Proposal.
        :type: str
        """
        if proposalId is None:
            raise ValueError("Invalid value for `proposalId`, must not be `None`")

        self._proposalId = proposalId

    @property
    def pi_email(self):
        """
        Gets the pi_email of this Proposal.
        Email of principal investigator

        :return: The pi_email of this Proposal.
        :rtype: str
        """
        return self._pi_email

    @pi_email.setter
    def pi_email(self, pi_email):
        """
        Sets the pi_email of this Proposal.
        Email of principal investigator

        :param pi_email: The pi_email of this Proposal.
        :type: str
        """

        self._pi_email = pi_email

    @property
    def pi_firstname(self):
        """
        Gets the pi_firstname of this Proposal.
        First name of principal investigator

        :return: The pi_firstname of this Proposal.
        :rtype: str
        """
        return self._pi_firstname

    @pi_firstname.setter
    def pi_firstname(self, pi_firstname):
        """
        Sets the pi_firstname of this Proposal.
        First name of principal investigator

        :param pi_firstname: The pi_firstname of this Proposal.
        :type: str
        """

        self._pi_firstname = pi_firstname

    @property
    def pi_lastname(self):
        """
        Gets the pi_lastname of this Proposal.
        Last name of principal investigator

        :return: The pi_lastname of this Proposal.
        :rtype: str
        """
        return self._pi_lastname

    @pi_lastname.setter
    def pi_lastname(self, pi_lastname):
        """
        Sets the pi_lastname of this Proposal.
        Last name of principal investigator

        :param pi_lastname: The pi_lastname of this Proposal.
        :type: str
        """

        self._pi_lastname = pi_lastname

    @property
    def email(self):
        """
        Gets the email of this Proposal.
        Email of main proposer

        :return: The email of this Proposal.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Proposal.
        Email of main proposer

        :param email: The email of this Proposal.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def firstname(self):
        """
        Gets the firstname of this Proposal.
        First name of main proposer

        :return: The firstname of this Proposal.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """
        Sets the firstname of this Proposal.
        First name of main proposer

        :param firstname: The firstname of this Proposal.
        :type: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """
        Gets the lastname of this Proposal.
        Last name of main proposer

        :return: The lastname of this Proposal.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """
        Sets the lastname of this Proposal.
        Last name of main proposer

        :param lastname: The lastname of this Proposal.
        :type: str
        """

        self._lastname = lastname

    @property
    def title(self):
        """
        Gets the title of this Proposal.

        :return: The title of this Proposal.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Proposal.

        :param title: The title of this Proposal.
        :type: str
        """

        self._title = title

    @property
    def abstract(self):
        """
        Gets the abstract of this Proposal.

        :return: The abstract of this Proposal.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract):
        """
        Sets the abstract of this Proposal.

        :param abstract: The abstract of this Proposal.
        :type: str
        """

        self._abstract = abstract

    @property
    def attachments(self):
        """
        Gets the attachments of this Proposal.
        Array of URLs pointing to attached documents

        :return: The attachments of this Proposal.
        :rtype: list[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """
        Sets the attachments of this Proposal.
        Array of URLs pointing to attached documents

        :param attachments: The attachments of this Proposal.
        :type: list[str]
        """

        self._attachments = attachments

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this Proposal.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this Proposal.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this Proposal.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this Proposal.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this Proposal.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this Proposal.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this Proposal.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this Proposal.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this Proposal.
        Functional or user account name who created this instance

        :return: The createdBy of this Proposal.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this Proposal.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this Proposal.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this Proposal.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this Proposal.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this Proposal.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this Proposal.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def createdAt(self):
        """
        Gets the createdAt of this Proposal.

        :return: The createdAt of this Proposal.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this Proposal.

        :param createdAt: The createdAt of this Proposal.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this Proposal.

        :return: The updatedAt of this Proposal.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this Proposal.

        :param updatedAt: The updatedAt of this Proposal.
        :type: datetime
        """

        self._updatedAt = updatedAt

    @property
    def MeasurementPeriodList(self):
        """
        Gets the MeasurementPeriodList of this Proposal.

        :return: The MeasurementPeriodList of this Proposal.
        :rtype: list[MeasurementPeriod]
        """
        return self._MeasurementPeriodList

    @MeasurementPeriodList.setter
    def MeasurementPeriodList(self, MeasurementPeriodList):
        """
        Sets the MeasurementPeriodList of this Proposal.

        :param MeasurementPeriodList: The MeasurementPeriodList of this Proposal.
        :type: list[MeasurementPeriod]
        """

        self._MeasurementPeriodList = MeasurementPeriodList

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Proposal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
