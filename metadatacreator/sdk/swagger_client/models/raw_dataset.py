# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RawDataset(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, principalInvestigator=None, endTime=None, creationLocation=None, dataFormat=None, scientificMetadata=None, pid=None, owner=None, ownerEmail=None, orcidOfOwner=None, contactEmail=None, sourceFolder=None, size=None, packedSize=None, creationTime=None, type=None, validationStatus=None, keywords=None, description=None, userTargetLocation=None, classification=None, license=None, version=None, doi=None, isPublished=None, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, createdAt=None, updatedAt=None, sampleId=None, proposalId=None):
        """
        RawDataset - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'principalInvestigator': 'str',
            'endTime': 'datetime',
            'creationLocation': 'str',
            'dataFormat': 'str',
            'scientificMetadata': 'object',
            'pid': 'str',
            'owner': 'str',
            'ownerEmail': 'str',
            'orcidOfOwner': 'str',
            'contactEmail': 'str',
            'sourceFolder': 'str',
            'size': 'float',
            'packedSize': 'float',
            'creationTime': 'datetime',
            'type': 'str',
            'validationStatus': 'str',
            'keywords': 'list[str]',
            'description': 'str',
            'userTargetLocation': 'str',
            'classification': 'str',
            'license': 'str',
            'version': 'str',
            'doi': 'str',
            'isPublished': 'bool',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'createdAt': 'datetime',
            'updatedAt': 'datetime',
            'sampleId': 'str',
            'proposalId': 'str'
        }

        self.attribute_map = {
            'principalInvestigator': 'principalInvestigator',
            'endTime': 'endTime',
            'creationLocation': 'creationLocation',
            'dataFormat': 'dataFormat',
            'scientificMetadata': 'scientificMetadata',
            'pid': 'pid',
            'owner': 'owner',
            'ownerEmail': 'ownerEmail',
            'orcidOfOwner': 'orcidOfOwner',
            'contactEmail': 'contactEmail',
            'sourceFolder': 'sourceFolder',
            'size': 'size',
            'packedSize': 'packedSize',
            'creationTime': 'creationTime',
            'type': 'type',
            'validationStatus': 'validationStatus',
            'keywords': 'keywords',
            'description': 'description',
            'userTargetLocation': 'userTargetLocation',
            'classification': 'classification',
            'license': 'license',
            'version': 'version',
            'doi': 'doi',
            'isPublished': 'isPublished',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt',
            'sampleId': 'sampleId',
            'proposalId': 'proposalId'
        }

        self._principalInvestigator = principalInvestigator
        self._endTime = endTime
        self._creationLocation = creationLocation
        self._dataFormat = dataFormat
        self._scientificMetadata = scientificMetadata
        self._pid = pid
        self._owner = owner
        self._ownerEmail = ownerEmail
        self._orcidOfOwner = orcidOfOwner
        self._contactEmail = contactEmail
        self._sourceFolder = sourceFolder
        self._size = size
        self._packedSize = packedSize
        self._creationTime = creationTime
        self._type = type
        self._validationStatus = validationStatus
        self._keywords = keywords
        self._description = description
        self._userTargetLocation = userTargetLocation
        self._classification = classification
        self._license = license
        self._version = version
        self._doi = doi
        self._isPublished = isPublished
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._createdAt = createdAt
        self._updatedAt = updatedAt
        self._sampleId = sampleId
        self._proposalId = proposalId

    @property
    def principalInvestigator(self):
        """
        Gets the principalInvestigator of this RawDataset.
        Email of principal investigator

        :return: The principalInvestigator of this RawDataset.
        :rtype: str
        """
        return self._principalInvestigator

    @principalInvestigator.setter
    def principalInvestigator(self, principalInvestigator):
        """
        Sets the principalInvestigator of this RawDataset.
        Email of principal investigator

        :param principalInvestigator: The principalInvestigator of this RawDataset.
        :type: str
        """
        if principalInvestigator is None:
            raise ValueError("Invalid value for `principalInvestigator`, must not be `None`")

        self._principalInvestigator = principalInvestigator

    @property
    def endTime(self):
        """
        Gets the endTime of this RawDataset.
        Time of end of data taking for this dataset, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server

        :return: The endTime of this RawDataset.
        :rtype: datetime
        """
        return self._endTime

    @endTime.setter
    def endTime(self, endTime):
        """
        Sets the endTime of this RawDataset.
        Time of end of data taking for this dataset, format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server

        :param endTime: The endTime of this RawDataset.
        :type: datetime
        """

        self._endTime = endTime

    @property
    def creationLocation(self):
        """
        Gets the creationLocation of this RawDataset.
        Unique location identifier where data was taken, usually in the form /Site-name/facility-name/instrumentOrBeamline-name

        :return: The creationLocation of this RawDataset.
        :rtype: str
        """
        return self._creationLocation

    @creationLocation.setter
    def creationLocation(self, creationLocation):
        """
        Sets the creationLocation of this RawDataset.
        Unique location identifier where data was taken, usually in the form /Site-name/facility-name/instrumentOrBeamline-name

        :param creationLocation: The creationLocation of this RawDataset.
        :type: str
        """
        if creationLocation is None:
            raise ValueError("Invalid value for `creationLocation`, must not be `None`")

        self._creationLocation = creationLocation

    @property
    def dataFormat(self):
        """
        Gets the dataFormat of this RawDataset.
        Defines format of subsequent scientific meta data, e.g Nexus Version x.y

        :return: The dataFormat of this RawDataset.
        :rtype: str
        """
        return self._dataFormat

    @dataFormat.setter
    def dataFormat(self, dataFormat):
        """
        Sets the dataFormat of this RawDataset.
        Defines format of subsequent scientific meta data, e.g Nexus Version x.y

        :param dataFormat: The dataFormat of this RawDataset.
        :type: str
        """

        self._dataFormat = dataFormat

    @property
    def scientificMetadata(self):
        """
        Gets the scientificMetadata of this RawDataset.
        JSON object containing the scientific meta data

        :return: The scientificMetadata of this RawDataset.
        :rtype: object
        """
        return self._scientificMetadata

    @scientificMetadata.setter
    def scientificMetadata(self, scientificMetadata):
        """
        Sets the scientificMetadata of this RawDataset.
        JSON object containing the scientific meta data

        :param scientificMetadata: The scientificMetadata of this RawDataset.
        :type: object
        """

        self._scientificMetadata = scientificMetadata

    @property
    def pid(self):
        """
        Gets the pid of this RawDataset.
        Persistent Identifier for datasets derived from UUIDv4 and prepended automatically by site specific PID prefix like 20.500.12345/

        :return: The pid of this RawDataset.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this RawDataset.
        Persistent Identifier for datasets derived from UUIDv4 and prepended automatically by site specific PID prefix like 20.500.12345/

        :param pid: The pid of this RawDataset.
        :type: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")

        self._pid = pid

    @property
    def owner(self):
        """
        Gets the owner of this RawDataset.
        Owner of the data set, usually first name + lastname

        :return: The owner of this RawDataset.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this RawDataset.
        Owner of the data set, usually first name + lastname

        :param owner: The owner of this RawDataset.
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def ownerEmail(self):
        """
        Gets the ownerEmail of this RawDataset.
        Email of owner of the data set

        :return: The ownerEmail of this RawDataset.
        :rtype: str
        """
        return self._ownerEmail

    @ownerEmail.setter
    def ownerEmail(self, ownerEmail):
        """
        Sets the ownerEmail of this RawDataset.
        Email of owner of the data set

        :param ownerEmail: The ownerEmail of this RawDataset.
        :type: str
        """

        self._ownerEmail = ownerEmail

    @property
    def orcidOfOwner(self):
        """
        Gets the orcidOfOwner of this RawDataset.
        ORCID of owner https://orcid.org if available

        :return: The orcidOfOwner of this RawDataset.
        :rtype: str
        """
        return self._orcidOfOwner

    @orcidOfOwner.setter
    def orcidOfOwner(self, orcidOfOwner):
        """
        Sets the orcidOfOwner of this RawDataset.
        ORCID of owner https://orcid.org if available

        :param orcidOfOwner: The orcidOfOwner of this RawDataset.
        :type: str
        """

        self._orcidOfOwner = orcidOfOwner

    @property
    def contactEmail(self):
        """
        Gets the contactEmail of this RawDataset.
        Email of contact person for this dataset

        :return: The contactEmail of this RawDataset.
        :rtype: str
        """
        return self._contactEmail

    @contactEmail.setter
    def contactEmail(self, contactEmail):
        """
        Sets the contactEmail of this RawDataset.
        Email of contact person for this dataset

        :param contactEmail: The contactEmail of this RawDataset.
        :type: str
        """
        if contactEmail is None:
            raise ValueError("Invalid value for `contactEmail`, must not be `None`")

        self._contactEmail = contactEmail

    @property
    def sourceFolder(self):
        """
        Gets the sourceFolder of this RawDataset.
        Absolute file path on file server containing the files of this dataset, optionally including protocol and file server hostname, e.g. nfs://fileserver1.example.com/some/path/to/sourcefolder. In case of a single file dataset, e.g. HDF5 data it contains the path up to, but excluding the filename.

        :return: The sourceFolder of this RawDataset.
        :rtype: str
        """
        return self._sourceFolder

    @sourceFolder.setter
    def sourceFolder(self, sourceFolder):
        """
        Sets the sourceFolder of this RawDataset.
        Absolute file path on file server containing the files of this dataset, optionally including protocol and file server hostname, e.g. nfs://fileserver1.example.com/some/path/to/sourcefolder. In case of a single file dataset, e.g. HDF5 data it contains the path up to, but excluding the filename.

        :param sourceFolder: The sourceFolder of this RawDataset.
        :type: str
        """
        if sourceFolder is None:
            raise ValueError("Invalid value for `sourceFolder`, must not be `None`")

        self._sourceFolder = sourceFolder

    @property
    def size(self):
        """
        Gets the size of this RawDataset.
        Total size of all source files contained in source folder on disk when unpacked

        :return: The size of this RawDataset.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this RawDataset.
        Total size of all source files contained in source folder on disk when unpacked

        :param size: The size of this RawDataset.
        :type: float
        """

        self._size = size

    @property
    def packedSize(self):
        """
        Gets the packedSize of this RawDataset.
        Total size of all datablock package files created for this dataset

        :return: The packedSize of this RawDataset.
        :rtype: float
        """
        return self._packedSize

    @packedSize.setter
    def packedSize(self, packedSize):
        """
        Sets the packedSize of this RawDataset.
        Total size of all datablock package files created for this dataset

        :param packedSize: The packedSize of this RawDataset.
        :type: float
        """

        self._packedSize = packedSize

    @property
    def creationTime(self):
        """
        Gets the creationTime of this RawDataset.
        Time when dataset became fully available on disk, i.e. all containing files have been written. Format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.

        :return: The creationTime of this RawDataset.
        :rtype: datetime
        """
        return self._creationTime

    @creationTime.setter
    def creationTime(self, creationTime):
        """
        Sets the creationTime of this RawDataset.
        Time when dataset became fully available on disk, i.e. all containing files have been written. Format according to chapter 5.6 internet date/time format in RFC 3339. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server.

        :param creationTime: The creationTime of this RawDataset.
        :type: datetime
        """
        if creationTime is None:
            raise ValueError("Invalid value for `creationTime`, must not be `None`")

        self._creationTime = creationTime

    @property
    def type(self):
        """
        Gets the type of this RawDataset.
        Characterize type of dataset, either 'base' or 'raw' or 'derived'. Autofilled

        :return: The type of this RawDataset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RawDataset.
        Characterize type of dataset, either 'base' or 'raw' or 'derived'. Autofilled

        :param type: The type of this RawDataset.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def validationStatus(self):
        """
        Gets the validationStatus of this RawDataset.
        Defines a level of trust, e.g. a measure of how much data was verified or used by other persons

        :return: The validationStatus of this RawDataset.
        :rtype: str
        """
        return self._validationStatus

    @validationStatus.setter
    def validationStatus(self, validationStatus):
        """
        Sets the validationStatus of this RawDataset.
        Defines a level of trust, e.g. a measure of how much data was verified or used by other persons

        :param validationStatus: The validationStatus of this RawDataset.
        :type: str
        """

        self._validationStatus = validationStatus

    @property
    def keywords(self):
        """
        Gets the keywords of this RawDataset.
        Array of tags associated with the meaning or contents of this dataset. Values should ideally come from defined vocabularies, taxonomies, ontologies or knowledge graphs

        :return: The keywords of this RawDataset.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this RawDataset.
        Array of tags associated with the meaning or contents of this dataset. Values should ideally come from defined vocabularies, taxonomies, ontologies or knowledge graphs

        :param keywords: The keywords of this RawDataset.
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def description(self):
        """
        Gets the description of this RawDataset.
        Free text explanation of contents of dataset

        :return: The description of this RawDataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RawDataset.
        Free text explanation of contents of dataset

        :param description: The description of this RawDataset.
        :type: str
        """

        self._description = description

    @property
    def userTargetLocation(self):
        """
        Gets the userTargetLocation of this RawDataset.
        User choosable absolute virtual path where datasets are stored. Mainly used as a help for the enduser at dataset retrieval time to find the proper dataset. Will be prepended by p-group

        :return: The userTargetLocation of this RawDataset.
        :rtype: str
        """
        return self._userTargetLocation

    @userTargetLocation.setter
    def userTargetLocation(self, userTargetLocation):
        """
        Sets the userTargetLocation of this RawDataset.
        User choosable absolute virtual path where datasets are stored. Mainly used as a help for the enduser at dataset retrieval time to find the proper dataset. Will be prepended by p-group

        :param userTargetLocation: The userTargetLocation of this RawDataset.
        :type: str
        """

        self._userTargetLocation = userTargetLocation

    @property
    def classification(self):
        """
        Gets the classification of this RawDataset.
        ACIA information about AUthenticity,COnfidentiality,INtegrity and AVailability requirements of dataset. E.g. AV(ailabilty)=medium could trigger the creation of a two tape copies. Format 'AV=medium,CO=low'

        :return: The classification of this RawDataset.
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """
        Sets the classification of this RawDataset.
        ACIA information about AUthenticity,COnfidentiality,INtegrity and AVailability requirements of dataset. E.g. AV(ailabilty)=medium could trigger the creation of a two tape copies. Format 'AV=medium,CO=low'

        :param classification: The classification of this RawDataset.
        :type: str
        """

        self._classification = classification

    @property
    def license(self):
        """
        Gets the license of this RawDataset.
        Name of license under which data can be used

        :return: The license of this RawDataset.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this RawDataset.
        Name of license under which data can be used

        :param license: The license of this RawDataset.
        :type: str
        """

        self._license = license

    @property
    def version(self):
        """
        Gets the version of this RawDataset.
        Version of API used in creation of dataset

        :return: The version of this RawDataset.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this RawDataset.
        Version of API used in creation of dataset

        :param version: The version of this RawDataset.
        :type: str
        """

        self._version = version

    @property
    def doi(self):
        """
        Gets the doi of this RawDataset.
        Digital object Identifier like doi: used for publication purposes

        :return: The doi of this RawDataset.
        :rtype: str
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """
        Sets the doi of this RawDataset.
        Digital object Identifier like doi: used for publication purposes

        :param doi: The doi of this RawDataset.
        :type: str
        """

        self._doi = doi

    @property
    def isPublished(self):
        """
        Gets the isPublished of this RawDataset.
        Flag is true when data are made publically available

        :return: The isPublished of this RawDataset.
        :rtype: bool
        """
        return self._isPublished

    @isPublished.setter
    def isPublished(self, isPublished):
        """
        Sets the isPublished of this RawDataset.
        Flag is true when data are made publically available

        :param isPublished: The isPublished of this RawDataset.
        :type: bool
        """

        self._isPublished = isPublished

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this RawDataset.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this RawDataset.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this RawDataset.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this RawDataset.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this RawDataset.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this RawDataset.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this RawDataset.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this RawDataset.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this RawDataset.
        Functional or user account name who created this instance

        :return: The createdBy of this RawDataset.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this RawDataset.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this RawDataset.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this RawDataset.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this RawDataset.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this RawDataset.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this RawDataset.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def createdAt(self):
        """
        Gets the createdAt of this RawDataset.

        :return: The createdAt of this RawDataset.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this RawDataset.

        :param createdAt: The createdAt of this RawDataset.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this RawDataset.

        :return: The updatedAt of this RawDataset.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this RawDataset.

        :param updatedAt: The updatedAt of this RawDataset.
        :type: datetime
        """

        self._updatedAt = updatedAt

    @property
    def sampleId(self):
        """
        Gets the sampleId of this RawDataset.

        :return: The sampleId of this RawDataset.
        :rtype: str
        """
        return self._sampleId

    @sampleId.setter
    def sampleId(self, sampleId):
        """
        Sets the sampleId of this RawDataset.

        :param sampleId: The sampleId of this RawDataset.
        :type: str
        """

        self._sampleId = sampleId

    @property
    def proposalId(self):
        """
        Gets the proposalId of this RawDataset.

        :return: The proposalId of this RawDataset.
        :rtype: str
        """
        return self._proposalId

    @proposalId.setter
    def proposalId(self, proposalId):
        """
        Sets the proposalId of this RawDataset.

        :param proposalId: The proposalId of this RawDataset.
        :type: str
        """

        self._proposalId = proposalId

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RawDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
