# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OrigDatablock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, size=None, dataFileList=None, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, datasetId=None, rawDatasetId=None, derivedDatasetId=None, createdAt=None, updatedAt=None):
        """
        OrigDatablock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'ObjectID',
            'size': 'float',
            'dataFileList': 'list[Datafile]',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'datasetId': 'str',
            'rawDatasetId': 'str',
            'derivedDatasetId': 'str',
            'createdAt': 'datetime',
            'updatedAt': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'size': 'size',
            'dataFileList': 'dataFileList',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'datasetId': 'datasetId',
            'rawDatasetId': 'rawDatasetId',
            'derivedDatasetId': 'derivedDatasetId',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt'
        }

        self._id = id
        self._size = size
        self._dataFileList = dataFileList
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._datasetId = datasetId
        self._rawDatasetId = rawDatasetId
        self._derivedDatasetId = derivedDatasetId
        self._createdAt = createdAt
        self._updatedAt = updatedAt

    @property
    def id(self):
        """
        Gets the id of this OrigDatablock.

        :return: The id of this OrigDatablock.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OrigDatablock.

        :param id: The id of this OrigDatablock.
        :type: ObjectID
        """

        self._id = id

    @property
    def size(self):
        """
        Gets the size of this OrigDatablock.
        Total size in bytes of all files contained in the dataFileList

        :return: The size of this OrigDatablock.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this OrigDatablock.
        Total size in bytes of all files contained in the dataFileList

        :param size: The size of this OrigDatablock.
        :type: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def dataFileList(self):
        """
        Gets the dataFileList of this OrigDatablock.
        List of files contained in the linked dataset. Files can be regular files, folders and softlinks. All file paths are relative paths with respect to the sourceFolder location of the linked dataset.

        :return: The dataFileList of this OrigDatablock.
        :rtype: list[Datafile]
        """
        return self._dataFileList

    @dataFileList.setter
    def dataFileList(self, dataFileList):
        """
        Sets the dataFileList of this OrigDatablock.
        List of files contained in the linked dataset. Files can be regular files, folders and softlinks. All file paths are relative paths with respect to the sourceFolder location of the linked dataset.

        :param dataFileList: The dataFileList of this OrigDatablock.
        :type: list[Datafile]
        """
        if dataFileList is None:
            raise ValueError("Invalid value for `dataFileList`, must not be `None`")

        self._dataFileList = dataFileList

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this OrigDatablock.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this OrigDatablock.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this OrigDatablock.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this OrigDatablock.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this OrigDatablock.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this OrigDatablock.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this OrigDatablock.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this OrigDatablock.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this OrigDatablock.
        Functional or user account name who created this instance

        :return: The createdBy of this OrigDatablock.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this OrigDatablock.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this OrigDatablock.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this OrigDatablock.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this OrigDatablock.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this OrigDatablock.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this OrigDatablock.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def datasetId(self):
        """
        Gets the datasetId of this OrigDatablock.

        :return: The datasetId of this OrigDatablock.
        :rtype: str
        """
        return self._datasetId

    @datasetId.setter
    def datasetId(self, datasetId):
        """
        Sets the datasetId of this OrigDatablock.

        :param datasetId: The datasetId of this OrigDatablock.
        :type: str
        """

        self._datasetId = datasetId

    @property
    def rawDatasetId(self):
        """
        Gets the rawDatasetId of this OrigDatablock.

        :return: The rawDatasetId of this OrigDatablock.
        :rtype: str
        """
        return self._rawDatasetId

    @rawDatasetId.setter
    def rawDatasetId(self, rawDatasetId):
        """
        Sets the rawDatasetId of this OrigDatablock.

        :param rawDatasetId: The rawDatasetId of this OrigDatablock.
        :type: str
        """

        self._rawDatasetId = rawDatasetId

    @property
    def derivedDatasetId(self):
        """
        Gets the derivedDatasetId of this OrigDatablock.

        :return: The derivedDatasetId of this OrigDatablock.
        :rtype: str
        """
        return self._derivedDatasetId

    @derivedDatasetId.setter
    def derivedDatasetId(self, derivedDatasetId):
        """
        Sets the derivedDatasetId of this OrigDatablock.

        :param derivedDatasetId: The derivedDatasetId of this OrigDatablock.
        :type: str
        """

        self._derivedDatasetId = derivedDatasetId

    @property
    def createdAt(self):
        """
        Gets the createdAt of this OrigDatablock.

        :return: The createdAt of this OrigDatablock.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this OrigDatablock.

        :param createdAt: The createdAt of this OrigDatablock.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this OrigDatablock.

        :return: The updatedAt of this OrigDatablock.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this OrigDatablock.

        :param updatedAt: The updatedAt of this OrigDatablock.
        :type: datetime
        """

        self._updatedAt = updatedAt

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OrigDatablock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
