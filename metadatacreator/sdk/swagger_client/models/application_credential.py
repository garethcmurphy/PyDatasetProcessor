# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApplicationCredential(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, provider=None, authScheme=None, credentials=None, created=None, modified=None, id=None):
        """
        ApplicationCredential - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'provider': 'str',
            'authScheme': 'str',
            'credentials': 'object',
            'created': 'datetime',
            'modified': 'datetime',
            'id': 'ObjectID'
        }

        self.attribute_map = {
            'provider': 'provider',
            'authScheme': 'authScheme',
            'credentials': 'credentials',
            'created': 'created',
            'modified': 'modified',
            'id': 'id'
        }

        self._provider = provider
        self._authScheme = authScheme
        self._credentials = credentials
        self._created = created
        self._modified = modified
        self._id = id

    @property
    def provider(self):
        """
        Gets the provider of this ApplicationCredential.

        :return: The provider of this ApplicationCredential.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this ApplicationCredential.

        :param provider: The provider of this ApplicationCredential.
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def authScheme(self):
        """
        Gets the authScheme of this ApplicationCredential.

        :return: The authScheme of this ApplicationCredential.
        :rtype: str
        """
        return self._authScheme

    @authScheme.setter
    def authScheme(self, authScheme):
        """
        Sets the authScheme of this ApplicationCredential.

        :param authScheme: The authScheme of this ApplicationCredential.
        :type: str
        """

        self._authScheme = authScheme

    @property
    def credentials(self):
        """
        Gets the credentials of this ApplicationCredential.

        :return: The credentials of this ApplicationCredential.
        :rtype: object
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this ApplicationCredential.

        :param credentials: The credentials of this ApplicationCredential.
        :type: object
        """

        self._credentials = credentials

    @property
    def created(self):
        """
        Gets the created of this ApplicationCredential.

        :return: The created of this ApplicationCredential.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ApplicationCredential.

        :param created: The created of this ApplicationCredential.
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """
        Gets the modified of this ApplicationCredential.

        :return: The modified of this ApplicationCredential.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this ApplicationCredential.

        :param modified: The modified of this ApplicationCredential.
        :type: datetime
        """

        self._modified = modified

    @property
    def id(self):
        """
        Gets the id of this ApplicationCredential.

        :return: The id of this ApplicationCredential.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ApplicationCredential.

        :param id: The id of this ApplicationCredential.
        :type: ObjectID
        """

        self._id = id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApplicationCredential):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
