# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Job(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, emailJobInitiator=None, type='retrieve', creationTime=None, executionTime=None, jobParams=None, jobStatusMessage=None, datasetList=None, archiveReturnMessage=None, dateOfLastMessage=None, id=None, createdAt=None, updatedAt=None, MessageHistory=None):
        """
        Job - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'emailJobInitiator': 'str',
            'type': 'str',
            'creationTime': 'datetime',
            'executionTime': 'datetime',
            'jobParams': 'object',
            'jobStatusMessage': 'str',
            'datasetList': 'object',
            'archiveReturnMessage': 'str',
            'dateOfLastMessage': 'datetime',
            'id': 'ObjectID',
            'createdAt': 'datetime',
            'updatedAt': 'datetime',
            'MessageHistory': 'list[Message]'
        }

        self.attribute_map = {
            'emailJobInitiator': 'emailJobInitiator',
            'type': 'type',
            'creationTime': 'creationTime',
            'executionTime': 'executionTime',
            'jobParams': 'jobParams',
            'jobStatusMessage': 'jobStatusMessage',
            'datasetList': 'datasetList',
            'archiveReturnMessage': 'archiveReturnMessage',
            'dateOfLastMessage': 'dateOfLastMessage',
            'id': 'id',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt',
            'MessageHistory': 'MessageHistory'
        }

        self._emailJobInitiator = emailJobInitiator
        self._type = type
        self._creationTime = creationTime
        self._executionTime = executionTime
        self._jobParams = jobParams
        self._jobStatusMessage = jobStatusMessage
        self._datasetList = datasetList
        self._archiveReturnMessage = archiveReturnMessage
        self._dateOfLastMessage = dateOfLastMessage
        self._id = id
        self._createdAt = createdAt
        self._updatedAt = updatedAt
        self._MessageHistory = MessageHistory

    @property
    def emailJobInitiator(self):
        """
        Gets the emailJobInitiator of this Job.
        The email of the person initiating the job request

        :return: The emailJobInitiator of this Job.
        :rtype: str
        """
        return self._emailJobInitiator

    @emailJobInitiator.setter
    def emailJobInitiator(self, emailJobInitiator):
        """
        Sets the emailJobInitiator of this Job.
        The email of the person initiating the job request

        :param emailJobInitiator: The emailJobInitiator of this Job.
        :type: str
        """
        if emailJobInitiator is None:
            raise ValueError("Invalid value for `emailJobInitiator`, must not be `None`")

        self._emailJobInitiator = emailJobInitiator

    @property
    def type(self):
        """
        Gets the type of this Job.
        Type of job, e.g. archive, retrieve etc

        :return: The type of this Job.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Job.
        Type of job, e.g. archive, retrieve etc

        :param type: The type of this Job.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def creationTime(self):
        """
        Gets the creationTime of this Job.
        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339

        :return: The creationTime of this Job.
        :rtype: datetime
        """
        return self._creationTime

    @creationTime.setter
    def creationTime(self, creationTime):
        """
        Sets the creationTime of this Job.
        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339

        :param creationTime: The creationTime of this Job.
        :type: datetime
        """

        self._creationTime = creationTime

    @property
    def executionTime(self):
        """
        Gets the executionTime of this Job.
        Time when job should be executed. If not specified then the Job will be executed asap. Format according to chapter 5.6 internet date/time format in RFC 3339

        :return: The executionTime of this Job.
        :rtype: datetime
        """
        return self._executionTime

    @executionTime.setter
    def executionTime(self, executionTime):
        """
        Sets the executionTime of this Job.
        Time when job should be executed. If not specified then the Job will be executed asap. Format according to chapter 5.6 internet date/time format in RFC 3339

        :param executionTime: The executionTime of this Job.
        :type: datetime
        """

        self._executionTime = executionTime

    @property
    def jobParams(self):
        """
        Gets the jobParams of this Job.
        Object of key-value pairs defining job input parameters, e.g. 'desinationPath' for retrieve jobs or 'tapeCopies' for archive jobs

        :return: The jobParams of this Job.
        :rtype: object
        """
        return self._jobParams

    @jobParams.setter
    def jobParams(self, jobParams):
        """
        Sets the jobParams of this Job.
        Object of key-value pairs defining job input parameters, e.g. 'desinationPath' for retrieve jobs or 'tapeCopies' for archive jobs

        :param jobParams: The jobParams of this Job.
        :type: object
        """

        self._jobParams = jobParams

    @property
    def jobStatusMessage(self):
        """
        Gets the jobStatusMessage of this Job.
        Defines current status of job lifecycle

        :return: The jobStatusMessage of this Job.
        :rtype: str
        """
        return self._jobStatusMessage

    @jobStatusMessage.setter
    def jobStatusMessage(self, jobStatusMessage):
        """
        Sets the jobStatusMessage of this Job.
        Defines current status of job lifecycle

        :param jobStatusMessage: The jobStatusMessage of this Job.
        :type: str
        """

        self._jobStatusMessage = jobStatusMessage

    @property
    def datasetList(self):
        """
        Gets the datasetList of this Job.
        Array of objects with keys: pid, files. The value for the pid key defines the dataset ID, the value for the files key is an array of file names. This array is either an empty array, implying that all files within the dataset are selected or an explicit list of dataset-relative file paths, which should be selected

        :return: The datasetList of this Job.
        :rtype: object
        """
        return self._datasetList

    @datasetList.setter
    def datasetList(self, datasetList):
        """
        Sets the datasetList of this Job.
        Array of objects with keys: pid, files. The value for the pid key defines the dataset ID, the value for the files key is an array of file names. This array is either an empty array, implying that all files within the dataset are selected or an explicit list of dataset-relative file paths, which should be selected

        :param datasetList: The datasetList of this Job.
        :type: object
        """
        if datasetList is None:
            raise ValueError("Invalid value for `datasetList`, must not be `None`")

        self._datasetList = datasetList

    @property
    def archiveReturnMessage(self):
        """
        Gets the archiveReturnMessage of this Job.
        Detailed status or error message returned by archive system at archive job creation time. If One Job request triggers many archive requests, e.g. when archiving multiple datasets in one job, then this message contains the result of the last dataset handled. Warning: to be obsoleted

        :return: The archiveReturnMessage of this Job.
        :rtype: str
        """
        return self._archiveReturnMessage

    @archiveReturnMessage.setter
    def archiveReturnMessage(self, archiveReturnMessage):
        """
        Sets the archiveReturnMessage of this Job.
        Detailed status or error message returned by archive system at archive job creation time. If One Job request triggers many archive requests, e.g. when archiving multiple datasets in one job, then this message contains the result of the last dataset handled. Warning: to be obsoleted

        :param archiveReturnMessage: The archiveReturnMessage of this Job.
        :type: str
        """

        self._archiveReturnMessage = archiveReturnMessage

    @property
    def dateOfLastMessage(self):
        """
        Gets the dateOfLastMessage of this Job.
        Time when last status message was sent. Format according to chapter 5.6 internet date/time format in RFC 3339. This will be filled automatically if not provided. Warning: to be obsoleted.

        :return: The dateOfLastMessage of this Job.
        :rtype: datetime
        """
        return self._dateOfLastMessage

    @dateOfLastMessage.setter
    def dateOfLastMessage(self, dateOfLastMessage):
        """
        Sets the dateOfLastMessage of this Job.
        Time when last status message was sent. Format according to chapter 5.6 internet date/time format in RFC 3339. This will be filled automatically if not provided. Warning: to be obsoleted.

        :param dateOfLastMessage: The dateOfLastMessage of this Job.
        :type: datetime
        """

        self._dateOfLastMessage = dateOfLastMessage

    @property
    def id(self):
        """
        Gets the id of this Job.

        :return: The id of this Job.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Job.

        :param id: The id of this Job.
        :type: ObjectID
        """

        self._id = id

    @property
    def createdAt(self):
        """
        Gets the createdAt of this Job.

        :return: The createdAt of this Job.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this Job.

        :param createdAt: The createdAt of this Job.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this Job.

        :return: The updatedAt of this Job.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this Job.

        :param updatedAt: The updatedAt of this Job.
        :type: datetime
        """

        self._updatedAt = updatedAt

    @property
    def MessageHistory(self):
        """
        Gets the MessageHistory of this Job.

        :return: The MessageHistory of this Job.
        :rtype: list[Message]
        """
        return self._MessageHistory

    @MessageHistory.setter
    def MessageHistory(self, MessageHistory):
        """
        Sets the MessageHistory of this Job.

        :param MessageHistory: The MessageHistory of this Job.
        :type: list[Message]
        """

        self._MessageHistory = MessageHistory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
