# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, shortMessage=None, sender=None, when=None, payload=None):
        """
        Message - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'shortMessage': 'str',
            'sender': 'str',
            'when': 'datetime',
            'payload': 'object'
        }

        self.attribute_map = {
            'id': 'id',
            'shortMessage': 'shortMessage',
            'sender': 'sender',
            'when': 'when',
            'payload': 'payload'
        }

        self._id = id
        self._shortMessage = shortMessage
        self._sender = sender
        self._when = when
        self._payload = payload

    @property
    def id(self):
        """
        Gets the id of this Message.
        id currently needed by limitation in embedsmany

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Message.
        id currently needed by limitation in embedsmany

        :param id: The id of this Message.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def shortMessage(self):
        """
        Gets the shortMessage of this Message.
        Short description of message, like datasetArchiveSuccesful

        :return: The shortMessage of this Message.
        :rtype: str
        """
        return self._shortMessage

    @shortMessage.setter
    def shortMessage(self, shortMessage):
        """
        Sets the shortMessage of this Message.
        Short description of message, like datasetArchiveSuccesful

        :param shortMessage: The shortMessage of this Message.
        :type: str
        """
        if shortMessage is None:
            raise ValueError("Invalid value for `shortMessage`, must not be `None`")

        self._shortMessage = shortMessage

    @property
    def sender(self):
        """
        Gets the sender of this Message.
        Email of user or role who triggered the message

        :return: The sender of this Message.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """
        Sets the sender of this Message.
        Email of user or role who triggered the message

        :param sender: The sender of this Message.
        :type: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender

    @property
    def when(self):
        """
        Gets the when of this Message.
        Time when message was received. Will be filled automatically by the server, format according to chapter 5.6 internet date/time format in RFC 3339.

        :return: The when of this Message.
        :rtype: datetime
        """
        return self._when

    @when.setter
    def when(self, when):
        """
        Sets the when of this Message.
        Time when message was received. Will be filled automatically by the server, format according to chapter 5.6 internet date/time format in RFC 3339.

        :param when: The when of this Message.
        :type: datetime
        """

        self._when = when

    @property
    def payload(self):
        """
        Gets the payload of this Message.
        Additional information relevant for this message. Please note this is an object

        :return: The payload of this Message.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this Message.
        Additional information relevant for this message. Please note this is an object

        :param payload: The payload of this Message.
        :type: object
        """

        self._payload = payload

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Message):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
