# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatasetLifecycle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, archivable=None, retrievable=None, dateOfDiskPurging=None, archiveRetentionTime=None, dateOfPublishing=None, isOnCentralDisk=None, isOnDisk=None, isOnTape=None, archiveStatusMessage=None, retrieveStatusMessage=None, lastUpdateMessage=None, archiveReturnMessage=None, dateOfLastMessage=None, isExported=None, exportedTo=None, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, datasetId=None, rawDatasetId=None, derivedDatasetId=None, createdAt=None, updatedAt=None, MessageHistory=None):
        """
        DatasetLifecycle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'archivable': 'bool',
            'retrievable': 'bool',
            'dateOfDiskPurging': 'datetime',
            'archiveRetentionTime': 'datetime',
            'dateOfPublishing': 'datetime',
            'isOnCentralDisk': 'bool',
            'isOnDisk': 'bool',
            'isOnTape': 'bool',
            'archiveStatusMessage': 'str',
            'retrieveStatusMessage': 'str',
            'lastUpdateMessage': 'str',
            'archiveReturnMessage': 'str',
            'dateOfLastMessage': 'datetime',
            'isExported': 'bool',
            'exportedTo': 'str',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'datasetId': 'str',
            'rawDatasetId': 'str',
            'derivedDatasetId': 'str',
            'createdAt': 'datetime',
            'updatedAt': 'datetime',
            'MessageHistory': 'list[Message]'
        }

        self.attribute_map = {
            'id': 'id',
            'archivable': 'archivable',
            'retrievable': 'retrievable',
            'dateOfDiskPurging': 'dateOfDiskPurging',
            'archiveRetentionTime': 'archiveRetentionTime',
            'dateOfPublishing': 'dateOfPublishing',
            'isOnCentralDisk': 'isOnCentralDisk',
            'isOnDisk': 'isOnDisk',
            'isOnTape': 'isOnTape',
            'archiveStatusMessage': 'archiveStatusMessage',
            'retrieveStatusMessage': 'retrieveStatusMessage',
            'lastUpdateMessage': 'lastUpdateMessage',
            'archiveReturnMessage': 'archiveReturnMessage',
            'dateOfLastMessage': 'dateOfLastMessage',
            'isExported': 'isExported',
            'exportedTo': 'exportedTo',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'datasetId': 'datasetId',
            'rawDatasetId': 'rawDatasetId',
            'derivedDatasetId': 'derivedDatasetId',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt',
            'MessageHistory': 'MessageHistory'
        }

        self._id = id
        self._archivable = archivable
        self._retrievable = retrievable
        self._dateOfDiskPurging = dateOfDiskPurging
        self._archiveRetentionTime = archiveRetentionTime
        self._dateOfPublishing = dateOfPublishing
        self._isOnCentralDisk = isOnCentralDisk
        self._isOnDisk = isOnDisk
        self._isOnTape = isOnTape
        self._archiveStatusMessage = archiveStatusMessage
        self._retrieveStatusMessage = retrieveStatusMessage
        self._lastUpdateMessage = lastUpdateMessage
        self._archiveReturnMessage = archiveReturnMessage
        self._dateOfLastMessage = dateOfLastMessage
        self._isExported = isExported
        self._exportedTo = exportedTo
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._datasetId = datasetId
        self._rawDatasetId = rawDatasetId
        self._derivedDatasetId = derivedDatasetId
        self._createdAt = createdAt
        self._updatedAt = updatedAt
        self._MessageHistory = MessageHistory

    @property
    def id(self):
        """
        Gets the id of this DatasetLifecycle.
        ID of status information. This must be the ID of the associated dataset

        :return: The id of this DatasetLifecycle.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatasetLifecycle.
        ID of status information. This must be the ID of the associated dataset

        :param id: The id of this DatasetLifecycle.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def archivable(self):
        """
        Gets the archivable of this DatasetLifecycle.
        Flag which is true, if dataset is available to be archived and no archive job for this dataset exists yet

        :return: The archivable of this DatasetLifecycle.
        :rtype: bool
        """
        return self._archivable

    @archivable.setter
    def archivable(self, archivable):
        """
        Sets the archivable of this DatasetLifecycle.
        Flag which is true, if dataset is available to be archived and no archive job for this dataset exists yet

        :param archivable: The archivable of this DatasetLifecycle.
        :type: bool
        """

        self._archivable = archivable

    @property
    def retrievable(self):
        """
        Gets the retrievable of this DatasetLifecycle.
        Flag which is true, if dataset is stored on archive system and is ready to be retrieved

        :return: The retrievable of this DatasetLifecycle.
        :rtype: bool
        """
        return self._retrievable

    @retrievable.setter
    def retrievable(self, retrievable):
        """
        Sets the retrievable of this DatasetLifecycle.
        Flag which is true, if dataset is stored on archive system and is ready to be retrieved

        :param retrievable: The retrievable of this DatasetLifecycle.
        :type: bool
        """

        self._retrievable = retrievable

    @property
    def dateOfDiskPurging(self):
        """
        Gets the dateOfDiskPurging of this DatasetLifecycle.
        Day when dataset will be removed from disk, assuming that is already stored on tape.

        :return: The dateOfDiskPurging of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._dateOfDiskPurging

    @dateOfDiskPurging.setter
    def dateOfDiskPurging(self, dateOfDiskPurging):
        """
        Sets the dateOfDiskPurging of this DatasetLifecycle.
        Day when dataset will be removed from disk, assuming that is already stored on tape.

        :param dateOfDiskPurging: The dateOfDiskPurging of this DatasetLifecycle.
        :type: datetime
        """

        self._dateOfDiskPurging = dateOfDiskPurging

    @property
    def archiveRetentionTime(self):
        """
        Gets the archiveRetentionTime of this DatasetLifecycle.
        Day when the dataset's future fate will be evaluated again, e.g. to decide if the dataset can be deleted from archive.

        :return: The archiveRetentionTime of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._archiveRetentionTime

    @archiveRetentionTime.setter
    def archiveRetentionTime(self, archiveRetentionTime):
        """
        Sets the archiveRetentionTime of this DatasetLifecycle.
        Day when the dataset's future fate will be evaluated again, e.g. to decide if the dataset can be deleted from archive.

        :param archiveRetentionTime: The archiveRetentionTime of this DatasetLifecycle.
        :type: datetime
        """

        self._archiveRetentionTime = archiveRetentionTime

    @property
    def dateOfPublishing(self):
        """
        Gets the dateOfPublishing of this DatasetLifecycle.
        Day when dataset is supposed to become public according to data policy

        :return: The dateOfPublishing of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._dateOfPublishing

    @dateOfPublishing.setter
    def dateOfPublishing(self, dateOfPublishing):
        """
        Sets the dateOfPublishing of this DatasetLifecycle.
        Day when dataset is supposed to become public according to data policy

        :param dateOfPublishing: The dateOfPublishing of this DatasetLifecycle.
        :type: datetime
        """

        self._dateOfPublishing = dateOfPublishing

    @property
    def isOnCentralDisk(self):
        """
        Gets the isOnCentralDisk of this DatasetLifecycle.
        Flag which is true, if full dataset is available on central fileserver. If false data needs to be copied from decentral storage place to  a cache server before the ingest. This information needs to be transferred to the archive system at archive time

        :return: The isOnCentralDisk of this DatasetLifecycle.
        :rtype: bool
        """
        return self._isOnCentralDisk

    @isOnCentralDisk.setter
    def isOnCentralDisk(self, isOnCentralDisk):
        """
        Sets the isOnCentralDisk of this DatasetLifecycle.
        Flag which is true, if full dataset is available on central fileserver. If false data needs to be copied from decentral storage place to  a cache server before the ingest. This information needs to be transferred to the archive system at archive time

        :param isOnCentralDisk: The isOnCentralDisk of this DatasetLifecycle.
        :type: bool
        """

        self._isOnCentralDisk = isOnCentralDisk

    @property
    def isOnDisk(self):
        """
        Gets the isOnDisk of this DatasetLifecycle.
        Flag which is true, if full dataset is available on disk. Warning: will be obsoleted in coming versions

        :return: The isOnDisk of this DatasetLifecycle.
        :rtype: bool
        """
        return self._isOnDisk

    @isOnDisk.setter
    def isOnDisk(self, isOnDisk):
        """
        Sets the isOnDisk of this DatasetLifecycle.
        Flag which is true, if full dataset is available on disk. Warning: will be obsoleted in coming versions

        :param isOnDisk: The isOnDisk of this DatasetLifecycle.
        :type: bool
        """

        self._isOnDisk = isOnDisk

    @property
    def isOnTape(self):
        """
        Gets the isOnTape of this DatasetLifecycle.
        Flag which is true, if full dataset has been stored to tape. Warning: will be obsoleted in coming versions

        :return: The isOnTape of this DatasetLifecycle.
        :rtype: bool
        """
        return self._isOnTape

    @isOnTape.setter
    def isOnTape(self, isOnTape):
        """
        Sets the isOnTape of this DatasetLifecycle.
        Flag which is true, if full dataset has been stored to tape. Warning: will be obsoleted in coming versions

        :param isOnTape: The isOnTape of this DatasetLifecycle.
        :type: bool
        """

        self._isOnTape = isOnTape

    @property
    def archiveStatusMessage(self):
        """
        Gets the archiveStatusMessage of this DatasetLifecycle.
        Current status of Dataset with respect to storage on disk/tape. Warning: will be obsoleted in coming versions

        :return: The archiveStatusMessage of this DatasetLifecycle.
        :rtype: str
        """
        return self._archiveStatusMessage

    @archiveStatusMessage.setter
    def archiveStatusMessage(self, archiveStatusMessage):
        """
        Sets the archiveStatusMessage of this DatasetLifecycle.
        Current status of Dataset with respect to storage on disk/tape. Warning: will be obsoleted in coming versions

        :param archiveStatusMessage: The archiveStatusMessage of this DatasetLifecycle.
        :type: str
        """

        self._archiveStatusMessage = archiveStatusMessage

    @property
    def retrieveStatusMessage(self):
        """
        Gets the retrieveStatusMessage of this DatasetLifecycle.
        Latest message for this dataset concerning retrieve from archive system. Warning: will be obsoleted in coming versions

        :return: The retrieveStatusMessage of this DatasetLifecycle.
        :rtype: str
        """
        return self._retrieveStatusMessage

    @retrieveStatusMessage.setter
    def retrieveStatusMessage(self, retrieveStatusMessage):
        """
        Sets the retrieveStatusMessage of this DatasetLifecycle.
        Latest message for this dataset concerning retrieve from archive system. Warning: will be obsoleted in coming versions

        :param retrieveStatusMessage: The retrieveStatusMessage of this DatasetLifecycle.
        :type: str
        """

        self._retrieveStatusMessage = retrieveStatusMessage

    @property
    def lastUpdateMessage(self):
        """
        Gets the lastUpdateMessage of this DatasetLifecycle.
        Latest status update / transition message for this dataset. Warning: will be obsoleted in coming versions

        :return: The lastUpdateMessage of this DatasetLifecycle.
        :rtype: str
        """
        return self._lastUpdateMessage

    @lastUpdateMessage.setter
    def lastUpdateMessage(self, lastUpdateMessage):
        """
        Sets the lastUpdateMessage of this DatasetLifecycle.
        Latest status update / transition message for this dataset. Warning: will be obsoleted in coming versions

        :param lastUpdateMessage: The lastUpdateMessage of this DatasetLifecycle.
        :type: str
        """

        self._lastUpdateMessage = lastUpdateMessage

    @property
    def archiveReturnMessage(self):
        """
        Gets the archiveReturnMessage of this DatasetLifecycle.
        Detailed status or error message returned by archive system when treating this dataset. Warning: will be obsoleted in coming versions

        :return: The archiveReturnMessage of this DatasetLifecycle.
        :rtype: str
        """
        return self._archiveReturnMessage

    @archiveReturnMessage.setter
    def archiveReturnMessage(self, archiveReturnMessage):
        """
        Sets the archiveReturnMessage of this DatasetLifecycle.
        Detailed status or error message returned by archive system when treating this dataset. Warning: will be obsoleted in coming versions

        :param archiveReturnMessage: The archiveReturnMessage of this DatasetLifecycle.
        :type: str
        """

        self._archiveReturnMessage = archiveReturnMessage

    @property
    def dateOfLastMessage(self):
        """
        Gets the dateOfLastMessage of this DatasetLifecycle.
        Time when last status message was sent. Format according to chapter 5.6 internet date/time format in RFC 3339. This will be filled automatically if not provided. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server. Warning: will be obsoleted in coming versions

        :return: The dateOfLastMessage of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._dateOfLastMessage

    @dateOfLastMessage.setter
    def dateOfLastMessage(self, dateOfLastMessage):
        """
        Sets the dateOfLastMessage of this DatasetLifecycle.
        Time when last status message was sent. Format according to chapter 5.6 internet date/time format in RFC 3339. This will be filled automatically if not provided. Local times without timezone/offset info are automatically transformed to UTC using the timezone of the API server. Warning: will be obsoleted in coming versions

        :param dateOfLastMessage: The dateOfLastMessage of this DatasetLifecycle.
        :type: datetime
        """

        self._dateOfLastMessage = dateOfLastMessage

    @property
    def isExported(self):
        """
        Gets the isExported of this DatasetLifecycle.
        Flag is true if data was exported to another location. Warning: will be obsoleted in coming versions

        :return: The isExported of this DatasetLifecycle.
        :rtype: bool
        """
        return self._isExported

    @isExported.setter
    def isExported(self, isExported):
        """
        Sets the isExported of this DatasetLifecycle.
        Flag is true if data was exported to another location. Warning: will be obsoleted in coming versions

        :param isExported: The isExported of this DatasetLifecycle.
        :type: bool
        """

        self._isExported = isExported

    @property
    def exportedTo(self):
        """
        Gets the exportedTo of this DatasetLifecycle.
        Location of the export destination. Warning: will be obsoleted in coming versions

        :return: The exportedTo of this DatasetLifecycle.
        :rtype: str
        """
        return self._exportedTo

    @exportedTo.setter
    def exportedTo(self, exportedTo):
        """
        Sets the exportedTo of this DatasetLifecycle.
        Location of the export destination. Warning: will be obsoleted in coming versions

        :param exportedTo: The exportedTo of this DatasetLifecycle.
        :type: str
        """

        self._exportedTo = exportedTo

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this DatasetLifecycle.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this DatasetLifecycle.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this DatasetLifecycle.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this DatasetLifecycle.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this DatasetLifecycle.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this DatasetLifecycle.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this DatasetLifecycle.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this DatasetLifecycle.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this DatasetLifecycle.
        Functional or user account name who created this instance

        :return: The createdBy of this DatasetLifecycle.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this DatasetLifecycle.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this DatasetLifecycle.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this DatasetLifecycle.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this DatasetLifecycle.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this DatasetLifecycle.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this DatasetLifecycle.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def datasetId(self):
        """
        Gets the datasetId of this DatasetLifecycle.

        :return: The datasetId of this DatasetLifecycle.
        :rtype: str
        """
        return self._datasetId

    @datasetId.setter
    def datasetId(self, datasetId):
        """
        Sets the datasetId of this DatasetLifecycle.

        :param datasetId: The datasetId of this DatasetLifecycle.
        :type: str
        """

        self._datasetId = datasetId

    @property
    def rawDatasetId(self):
        """
        Gets the rawDatasetId of this DatasetLifecycle.

        :return: The rawDatasetId of this DatasetLifecycle.
        :rtype: str
        """
        return self._rawDatasetId

    @rawDatasetId.setter
    def rawDatasetId(self, rawDatasetId):
        """
        Sets the rawDatasetId of this DatasetLifecycle.

        :param rawDatasetId: The rawDatasetId of this DatasetLifecycle.
        :type: str
        """

        self._rawDatasetId = rawDatasetId

    @property
    def derivedDatasetId(self):
        """
        Gets the derivedDatasetId of this DatasetLifecycle.

        :return: The derivedDatasetId of this DatasetLifecycle.
        :rtype: str
        """
        return self._derivedDatasetId

    @derivedDatasetId.setter
    def derivedDatasetId(self, derivedDatasetId):
        """
        Sets the derivedDatasetId of this DatasetLifecycle.

        :param derivedDatasetId: The derivedDatasetId of this DatasetLifecycle.
        :type: str
        """

        self._derivedDatasetId = derivedDatasetId

    @property
    def createdAt(self):
        """
        Gets the createdAt of this DatasetLifecycle.

        :return: The createdAt of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this DatasetLifecycle.

        :param createdAt: The createdAt of this DatasetLifecycle.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this DatasetLifecycle.

        :return: The updatedAt of this DatasetLifecycle.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this DatasetLifecycle.

        :param updatedAt: The updatedAt of this DatasetLifecycle.
        :type: datetime
        """

        self._updatedAt = updatedAt

    @property
    def MessageHistory(self):
        """
        Gets the MessageHistory of this DatasetLifecycle.

        :return: The MessageHistory of this DatasetLifecycle.
        :rtype: list[Message]
        """
        return self._MessageHistory

    @MessageHistory.setter
    def MessageHistory(self, MessageHistory):
        """
        Sets the MessageHistory of this DatasetLifecycle.

        :param MessageHistory: The MessageHistory of this DatasetLifecycle.
        :type: list[Message]
        """

        self._MessageHistory = MessageHistory

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasetLifecycle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
