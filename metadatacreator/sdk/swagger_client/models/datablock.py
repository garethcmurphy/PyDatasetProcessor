# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Datablock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, archiveId=None, size=None, packedSize=None, chkAlg=None, version=None, dataFileList=None, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, datasetId=None, rawDatasetId=None, derivedDatasetId=None, createdAt=None, updatedAt=None):
        """
        Datablock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'archiveId': 'str',
            'size': 'float',
            'packedSize': 'float',
            'chkAlg': 'str',
            'version': 'str',
            'dataFileList': 'list[Datafile]',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'datasetId': 'str',
            'rawDatasetId': 'str',
            'derivedDatasetId': 'str',
            'createdAt': 'datetime',
            'updatedAt': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'archiveId': 'archiveId',
            'size': 'size',
            'packedSize': 'packedSize',
            'chkAlg': 'chkAlg',
            'version': 'version',
            'dataFileList': 'dataFileList',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'datasetId': 'datasetId',
            'rawDatasetId': 'rawDatasetId',
            'derivedDatasetId': 'derivedDatasetId',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt'
        }

        self._id = id
        self._archiveId = archiveId
        self._size = size
        self._packedSize = packedSize
        self._chkAlg = chkAlg
        self._version = version
        self._dataFileList = dataFileList
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._datasetId = datasetId
        self._rawDatasetId = rawDatasetId
        self._derivedDatasetId = derivedDatasetId
        self._createdAt = createdAt
        self._updatedAt = updatedAt

    @property
    def id(self):
        """
        Gets the id of this Datablock.
        Catalog internal UUIDv4 for datablock

        :return: The id of this Datablock.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Datablock.
        Catalog internal UUIDv4 for datablock

        :param id: The id of this Datablock.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def archiveId(self):
        """
        Gets the archiveId of this Datablock.
        Unique identifier given bey archive system to the stored datablock. This id is used when data is retrieved back.

        :return: The archiveId of this Datablock.
        :rtype: str
        """
        return self._archiveId

    @archiveId.setter
    def archiveId(self, archiveId):
        """
        Sets the archiveId of this Datablock.
        Unique identifier given bey archive system to the stored datablock. This id is used when data is retrieved back.

        :param archiveId: The archiveId of this Datablock.
        :type: str
        """
        if archiveId is None:
            raise ValueError("Invalid value for `archiveId`, must not be `None`")

        self._archiveId = archiveId

    @property
    def size(self):
        """
        Gets the size of this Datablock.
        Total size in bytes of all files in datablock when unpacked

        :return: The size of this Datablock.
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Datablock.
        Total size in bytes of all files in datablock when unpacked

        :param size: The size of this Datablock.
        :type: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def packedSize(self):
        """
        Gets the packedSize of this Datablock.
        Size of datablock package file

        :return: The packedSize of this Datablock.
        :rtype: float
        """
        return self._packedSize

    @packedSize.setter
    def packedSize(self, packedSize):
        """
        Sets the packedSize of this Datablock.
        Size of datablock package file

        :param packedSize: The packedSize of this Datablock.
        :type: float
        """

        self._packedSize = packedSize

    @property
    def chkAlg(self):
        """
        Gets the chkAlg of this Datablock.
        Algoritm used for calculation of checksums, e.g. sha2

        :return: The chkAlg of this Datablock.
        :rtype: str
        """
        return self._chkAlg

    @chkAlg.setter
    def chkAlg(self, chkAlg):
        """
        Sets the chkAlg of this Datablock.
        Algoritm used for calculation of checksums, e.g. sha2

        :param chkAlg: The chkAlg of this Datablock.
        :type: str
        """

        self._chkAlg = chkAlg

    @property
    def version(self):
        """
        Gets the version of this Datablock.
        Version string defining format of how data is packed and stored in archive

        :return: The version of this Datablock.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Datablock.
        Version string defining format of how data is packed and stored in archive

        :param version: The version of this Datablock.
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def dataFileList(self):
        """
        Gets the dataFileList of this Datablock.

        :return: The dataFileList of this Datablock.
        :rtype: list[Datafile]
        """
        return self._dataFileList

    @dataFileList.setter
    def dataFileList(self, dataFileList):
        """
        Sets the dataFileList of this Datablock.

        :param dataFileList: The dataFileList of this Datablock.
        :type: list[Datafile]
        """
        if dataFileList is None:
            raise ValueError("Invalid value for `dataFileList`, must not be `None`")

        self._dataFileList = dataFileList

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this Datablock.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this Datablock.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this Datablock.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this Datablock.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this Datablock.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this Datablock.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this Datablock.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this Datablock.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this Datablock.
        Functional or user account name who created this instance

        :return: The createdBy of this Datablock.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this Datablock.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this Datablock.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this Datablock.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this Datablock.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this Datablock.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this Datablock.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def datasetId(self):
        """
        Gets the datasetId of this Datablock.

        :return: The datasetId of this Datablock.
        :rtype: str
        """
        return self._datasetId

    @datasetId.setter
    def datasetId(self, datasetId):
        """
        Sets the datasetId of this Datablock.

        :param datasetId: The datasetId of this Datablock.
        :type: str
        """

        self._datasetId = datasetId

    @property
    def rawDatasetId(self):
        """
        Gets the rawDatasetId of this Datablock.

        :return: The rawDatasetId of this Datablock.
        :rtype: str
        """
        return self._rawDatasetId

    @rawDatasetId.setter
    def rawDatasetId(self, rawDatasetId):
        """
        Sets the rawDatasetId of this Datablock.

        :param rawDatasetId: The rawDatasetId of this Datablock.
        :type: str
        """

        self._rawDatasetId = rawDatasetId

    @property
    def derivedDatasetId(self):
        """
        Gets the derivedDatasetId of this Datablock.

        :return: The derivedDatasetId of this Datablock.
        :rtype: str
        """
        return self._derivedDatasetId

    @derivedDatasetId.setter
    def derivedDatasetId(self, derivedDatasetId):
        """
        Sets the derivedDatasetId of this Datablock.

        :param derivedDatasetId: The derivedDatasetId of this Datablock.
        :type: str
        """

        self._derivedDatasetId = derivedDatasetId

    @property
    def createdAt(self):
        """
        Gets the createdAt of this Datablock.

        :return: The createdAt of this Datablock.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this Datablock.

        :param createdAt: The createdAt of this Datablock.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this Datablock.

        :return: The updatedAt of this Datablock.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this Datablock.

        :param updatedAt: The updatedAt of this Datablock.
        :type: datetime
        """

        self._updatedAt = updatedAt

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Datablock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
