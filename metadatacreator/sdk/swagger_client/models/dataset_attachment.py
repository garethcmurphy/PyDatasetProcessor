# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.8.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DatasetAttachment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, thumbnail='retrieve', creationTime=None, id=None, datasetId=None, rawDatasetId=None, derivedDatasetId=None):
        """
        DatasetAttachment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'thumbnail': 'str',
            'creationTime': 'datetime',
            'id': 'ObjectID',
            'datasetId': 'str',
            'rawDatasetId': 'str',
            'derivedDatasetId': 'str'
        }

        self.attribute_map = {
            'thumbnail': 'thumbnail',
            'creationTime': 'creationTime',
            'id': 'id',
            'datasetId': 'datasetId',
            'rawDatasetId': 'rawDatasetId',
            'derivedDatasetId': 'derivedDatasetId'
        }

        self._thumbnail = thumbnail
        self._creationTime = creationTime
        self._id = id
        self._datasetId = datasetId
        self._rawDatasetId = rawDatasetId
        self._derivedDatasetId = derivedDatasetId

    @property
    def thumbnail(self):
        """
        Gets the thumbnail of this DatasetAttachment.
        Contains a thumbnail preview in base64 encoded png format for a given dataset

        :return: The thumbnail of this DatasetAttachment.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """
        Sets the thumbnail of this DatasetAttachment.
        Contains a thumbnail preview in base64 encoded png format for a given dataset

        :param thumbnail: The thumbnail of this DatasetAttachment.
        :type: str
        """
        if thumbnail is None:
            raise ValueError("Invalid value for `thumbnail`, must not be `None`")

        self._thumbnail = thumbnail

    @property
    def creationTime(self):
        """
        Gets the creationTime of this DatasetAttachment.
        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339

        :return: The creationTime of this DatasetAttachment.
        :rtype: datetime
        """
        return self._creationTime

    @creationTime.setter
    def creationTime(self, creationTime):
        """
        Sets the creationTime of this DatasetAttachment.
        Time when job is created. Format according to chapter 5.6 internet date/time format in RFC 3339

        :param creationTime: The creationTime of this DatasetAttachment.
        :type: datetime
        """

        self._creationTime = creationTime

    @property
    def id(self):
        """
        Gets the id of this DatasetAttachment.

        :return: The id of this DatasetAttachment.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DatasetAttachment.

        :param id: The id of this DatasetAttachment.
        :type: ObjectID
        """

        self._id = id

    @property
    def datasetId(self):
        """
        Gets the datasetId of this DatasetAttachment.

        :return: The datasetId of this DatasetAttachment.
        :rtype: str
        """
        return self._datasetId

    @datasetId.setter
    def datasetId(self, datasetId):
        """
        Sets the datasetId of this DatasetAttachment.

        :param datasetId: The datasetId of this DatasetAttachment.
        :type: str
        """

        self._datasetId = datasetId

    @property
    def rawDatasetId(self):
        """
        Gets the rawDatasetId of this DatasetAttachment.

        :return: The rawDatasetId of this DatasetAttachment.
        :rtype: str
        """
        return self._rawDatasetId

    @rawDatasetId.setter
    def rawDatasetId(self, rawDatasetId):
        """
        Sets the rawDatasetId of this DatasetAttachment.

        :param rawDatasetId: The rawDatasetId of this DatasetAttachment.
        :type: str
        """

        self._rawDatasetId = rawDatasetId

    @property
    def derivedDatasetId(self):
        """
        Gets the derivedDatasetId of this DatasetAttachment.

        :return: The derivedDatasetId of this DatasetAttachment.
        :rtype: str
        """
        return self._derivedDatasetId

    @derivedDatasetId.setter
    def derivedDatasetId(self, derivedDatasetId):
        """
        Sets the derivedDatasetId of this DatasetAttachment.

        :param derivedDatasetId: The derivedDatasetId of this DatasetAttachment.
        :type: str
        """

        self._derivedDatasetId = derivedDatasetId

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasetAttachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
